
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:spry="http://ns.adobe.com/spry">
	<head>
		<title>Side Quests</title>
		<link type="text/css" rel="stylesheet" href="../css/bootstrap.css">
		<link type="text/css" rel="stylesheet" href="../zelda.css">
		<link href="https://fonts.googleapis.com/css?family=Abril+Fatface" rel="stylesheet">
		
		<script type="text/javascript">
			//Gathers the data from the xml files for the 'skills', 'bugs', and 'poes' tables
			
			//XMLHttpRequest object
			var request;
			
			//Sends request for XML file
			function getRequest(url){
				//Creates XMLHttpRequest object and makes the request
				try{
					//Request object
					request = new XMLHttpRequest();
					
					if(url == "skills.xml")
						//Registers, prepares, and sends the request for skills table
						request.addEventListener("readystatechange", populateSkills, false); 
						request.open( "GET", url, true );
						request.send( null );
					}
					if(url == "bugs.xml")
						//Registers, prepares, and sends the request for bugs table
						request.addEventListener("readystatechange", populateBugs, false); 
						request.open( "GET", url, true );
						request.send( null );
					}
					if(url == "poes.xml")
						//Registers, prepares, and sends the request for poes table
						request.addEventListener("readystatechange", populatePoes, false); 
						request.open( "GET", url, true );
						request.send( null );
					}
				catch ( exception ){
					alert( "Request Failed" );
				}
			}
			
			function populateSkills(){
				if ( request.readyState == 4 && request.status == 200){
					//Get the skills from the responseXML
					var skills = request.responseXML.getElementsByTagName("skill");
					
					//Get the placeholder div element
					var output = document.getElementById( "dsSkills" );
			 
					//Create a table and table sections to display the skills
					var skillTable = document.createElement( "table" );
					var tableTHEAD = document.createElement("thead");
					var tableTBODY = document.createElement("tbody");
					
					//Place skills in table cells
					for ( var i = -1; i < skills.length; ++i ){
						//Creates table row element for the table
						var tableTR = document.createElement( "tr" );
						
						if(i == -1){
							//Creates the th elements
							var tableTD1 = document.createElement( "th" );
							var tableTD2 = document.createElement( "th" );
							var tableTD3 = document.createElement( "th" );
							var tableTD4 = document.createElement( "th" );
							
							//Filling th elements with text
							tableTD1.appendChild(document.createTextNode("Number"));
							tableTD2.appendChild(document.createTextNode("Skill"));
							tableTD3.appendChild(document.createTextNode("Description"));
							tableTD4.appendChild(document.createTextNode("Location"));
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							tableTR.appendChild(tableTD3);
							tableTR.appendChild(tableTD4);
							
							//Append row into table
							tableTHEAD.appendChild(tableTR);
							skillTable.appendChild(tableTHEAD);
						}
						else{
							//Get a skill from skills array
							var skill = skills.item( i );
							
							//Get the skill info
							var number = skill.getElementsByTagName( "number" ).item( 0 ).firstChild.nodeValue;
							var name = skill.getElementsByTagName( "name" ).item( 0 ).firstChild.nodeValue;
							var desc = skill.getElementsByTagName( "desc" ).item( 0 ).firstChild.nodeValue;
							var stone = skill.getElementsByTagName( "stone" ).item( 0 ).firstChild.nodeValue;
							var location = skill.getElementsByTagName( "location" ).item( 0 ).firstChild.nodeValue;
							
							//Creates the td, ul, and li elements
							var tableTD1 = document.createElement( "td" );
							var tableTD2 = document.createElement( "td" );
							var tableTD3 = document.createElement( "td" );
							var tableTD4 = document.createElement( "td" );
							var tableUL = document.createElement("ul");
							var tableLI1 = document.createElement("li");
							var tableLI2 = document.createElement("li");
							
							//Filling td elements with text
							tableLI1.appendChild(document.createTextNode(stone));
							tableLI2.appendChild(document.createTextNode(location));
							
							tableUL.appendChild(tableLI1);
							tableUL.appendChild(tableLI2);
							
							tableTD1.appendChild(document.createTextNode(number));
							tableTD2.appendChild(document.createTextNode(name));
							tableTD3.appendChild(document.createTextNode(desc));
							tableTD4.appendChild(tableUL);
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							tableTR.appendChild(tableTD3);
							tableTR.appendChild(tableTD4);
							
							//Append row into table body
							tableTBODY.appendChild(tableTR);
						}
					}
					skillTable.appendChild(tableTBODY);
					//Append table to dsSkills div
					output.appendChild(skillTable);
				}
			}
			
			function populateBugs(){
				if ( request.readyState == 4 && request.status == 200 ){
					//Get the bugs from the responseXML
					var bugs = request.responseXML.getElementsByTagName("bug");
					
					//Get the placeholder div element
					var output = document.getElementById( "dsBugs" );
			 
					//Create a table and table sections to display the bugs
					var bugTable = document.createElement( "table" );
					var tableTHEAD = document.createElement("thead");
					var tableTBODY = document.createElement("tbody");
					
					//Place bugs in table cells
					for ( var i = -1; i < bugs.length; ++i ){
						//Creates table row element for the table
						var tableTR = document.createElement( "tr" );
						
						if(i == -1){
							//Creates the th elements
							var tableTD1 = document.createElement( "th" );
							var tableTD2 = document.createElement( "th" );
							
							//Filling th elements with text
							tableTD1.appendChild(document.createTextNode("Bug"));
							tableTD2.appendChild(document.createTextNode("Location"));
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							
							//Append row into table
							tableTHEAD.appendChild(tableTR);
							bugTable.appendChild(tableTHEAD);
						}
						else{
							//Get a bug from bugs array
							var bug = bugs.item( i );
							
							//Get the bug info
							var name = skill.getElementsByTagName( "name" ).item( 0 ).firstChild.nodeValue;
							var location = skill.getElementsByTagName( "location" ).item( 0 ).firstChild.nodeValue;
							
							//Creates the td, ul, and li elements
							var tableTD1 = document.createElement( "td" );
							var tableTD2 = document.createElement( "td" );
							
							//Filling td elements with text
							tableTD1.appendChild(document.createTextNode(name));
							tableTD2.appendChild(document.createTextNode(location));
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							
							//Append row into table body
							tableTBODY.appendChild(tableTR);
						}
					}
					bugTable.appendChild(tableTBODY);
					//Append table to dsBugs div
					output.appendChild(bugTable);
				}
			}
			
			function populatePoes(){
				if ( request.readyState == 4 && request.status == 200){
					//Get the poes from the responseXML
					var poes = request.responseXML.getElementsByTagName("poe");
					
					//Get the placeholder div element
					var output = document.getElementById( "dsPoes" );
			 
					//Create a table and table sections to display the poes
					var poeTable = document.createElement( "table" );
					var tableTHEAD = document.createElement("thead");
					var tableTBODY = document.createElement("tbody");
					
					//Place poes in table cells
					for ( var i = -1; i < poes.length; ++i ){
						//Creates table row element for the table
						var tableTR = document.createElement( "tr" );
						
						if(i == 1){
							//Creates the th elements
							var tableTD1 = document.createElement( "th" );
							var tableTD2 = document.createElement( "th" );
							
							//Filling th elements with text
							tableTD1.appendChild(document.createTextNode("Amount of Poes"));
							tableTD2.appendChild(document.createTextNode("General Location"));
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							
							//Append row into table
							tableTHEAD.appendChild(tableTR);
							poeTable.appendChild(tableTHEAD);
							
						}
						else{
							//Get a poe from poes array
							var poe = poes.item( i );
							
							//Get the poe info
							var number = skill.getElementsByTagName( "number" ).item( 0 ).firstChild.nodeValue;
							var location = skill.getElementsByTagName( "location" ).item( 0 ).firstChild.nodeValue;
							
							//Creates the td, ul, and li elements
							var tableTD1 = document.createElement( "td" );
							var tableTD2 = document.createElement( "td" );
							
							//Filling td elements with text
							tableTD1.appendChild(document.createTextNode(number));
							tableTD2.appendChild(document.createTextNode(location));
							
							//Append data cells into the row
							tableTR.appendChild(tableTD1);
							tableTR.appendChild(tableTD2);
							
							//Append row into table body
							
							tableTBODY.appendChild(tableTR);
						}
					}
					poeTable.appendChild(tableTBODY);
					//Append table to dsPoes div
					output.innerHTML=poeTable;
				}
			}
			
			//Executes when the cursor moves over the skill image
			function mOver(){
				//Changes the src attribute to a new one
				document.getElementById("ancientHero").setAttribute("src", "../images/skill2.JPG");
			}
			
			//Executes when the cursor moves off of the skill image
			function mOut(){
				//Changes the src attribute back to the original one
				document.getElementById("ancientHero").setAttribute("src", "../images/skill1.JPG");
			}
			
			//Executes when the page loads
			function start(){
				
				
				//Creates an event for the footer button
				var btnOpen = document.getElementById("btnOpen").addEventListener("click", visit, false);
				
				//Checks if the user has inputted a color for the background and sets the background to that color
				if(localStorage.getItem("color") != null){
					document.body.setAttribute("style", "background-color:"+localStorage.getItem("color"));
				}
				
				//Creates an event for the skill image when the cursor goes over the skill image and off
				var imgSkill = document.getElementById("ancientHero");
				imgSkill.addEventListener("mouseover", mOver, false);
				imgSkill.addEventListener("mouseout", mOut, false);
				
				getRequest("skills.xml");
				getRequest("bugs.xml");
				getRequest("poes.xml");
			}
			
			//Executes when the 'Visit Source' button in the footer is clicked
			function visit(){
				//Opens a window to a similar website
				var browser = window.open("https://www.zeldadungeon.net/twilight-princess-walkthrough/", "_blank", "titlebar, menubar, toolbar, width=400, height=200");
			}
			window.addEventListener("load", start, false);
		</script>
	</head>
	<body>
		<div class="container">
			<div class="col-md-12 offset-0">
				<nav class="navbar navbar-expand-lg navbar-light bg-light">
					<div class="navbar-header">
						<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-expanded="false">
							<span class="navbar-toggler-icon"></span>
						</button>
					</div> 
					<div class="collapse navbar-collapse" id="navbarNavAltMarkup">
						<div class="navbar-nav">
							<a  href="../index.html">Home</a>
							<a  href="../Characters/index.html">Characters</a>
							<a  href="./index.html">Side Quests</a>
							<a  href="../Twilight_Trivia/index.html">Twilight Trivia</a>	
							<a  href="../Armor/index.html">Random Armor</a>
							<a  href="../Login/index.html">Login</a>
						</div>	
					</div>
				</nav>
			</div>
			<div class="col-md-12 offset-0">
				<div class="banner">
					<h1>LoZ Twilight Princess</h1>
				</div>
			</div>
			<div class="col-md-12 offset-0">
			<div class="body">
				<p id="top">Within Legend of Zelda: Twilight Princess, there are multiple side quests such as:</p>
				<ul>
					<li><a href="#skill">The Hidden Skills</a></li>
					<li><a href="#bug">Agitha's Golden Bugs</a></li>
					<li><a href="#soul">Jovani's Soul</a></li>
					
				</ul>
				<h3 class="center" id="skill">The Hidden Skills</h3>
				<div class="picture">
					<img id="ancientHero" alt="Hero's spirit in wolf form" src="../images/skill1.JPG">
				</div>
				<p>There are seven hidden skills that can be learned in the game. The first one will be learned during the main quest, but the other skills will require that you seek out the Howling Stones. When you are in your wolf form, you must go near the Howling Stones and howl the tune coming from it. Once you have successfully played the tune, a wolf apparition will appear somewhere in Hyrule to teach you a one of the Hidden Skills.</p>
				<div id="dsSkills">
					
				</div>
				<p class="center"><a href="#top">Back to the top of the page</a></p>
				<h3 class="center" id="bug">Agitha's Golden Bugs</h3>
				<div class="picture">
					<img alt="Agitha" src="../images/agitha1.JPG">
				</div>
				<p>Agitha is a girl who lives in Castle Town and has a fondness for bugs, especially golden ones. She will ask you gather these bugs for her and in return will give you Rupees in exchange. There are twelve types of golden bugs and one of each gender (a total of 24 bugs). Once you give her one bug, she will give a larger wallet to hold 600 Rupees. When you have finally given completed her quest, she will give you a giant wallet to hold 1000 Rupees.</p>
				<div id="dsBugs">
					
				</div>
				<p class="center"><a href="#top">Back to the top of the page</a></p>
				<h3 class="center" id="soul">Jovani's Soul</h3>
				<div class="picture">
					<img alt="Jovani" src="../images/jovani.JPG">
				</div>
				<p>Jovani is a man who lives in Castle Town and was turned into a solid gold statue after selling his soul to be rich. He only wishes to returned to normal so that he can be with his girlfriend again, and will ask you to find all the poes that contain a fraction of his soul. There are sixty poes spread across Hyrule, and they only appear during the night. Once you collect twenty poe souls, Jovani will be able to move again, but will still be made of gold. When you have collected all the poe souls, he will return to normal.</p>
				<div id="dsPoes">
					
				</div>
				<p class="center"><a href="#top">Back to the top of the page</a></p>
			</div>
			</div>
			<div class="col-md-12 offset-0">
				<div class="footer">
					<p>This website is developed as an educational project. Certain materials are included under the fair 
					use exemption of the U.S. Copyright Law and have been prepared according to the multimedia fair use 
					guidelines and are restricted from further use.</p>
					<p>All images were taken by Ashwin Paskar through the use of an iPhone</p>
					<p>Here is a link to the style sheet: <a href="../zelda.css">zelda.css</a></p>
					<form action="#">
						<input type="button" id="btnOpen" value="Visit Source">
					</form>
					<script type="text/javascript">
						//Displays the date the web page was last modified
						var modified = new Date(document.lastModified);
						var string = modified.toLocaleString();
						document.writeln(string);
					</script>
				</div>
			</div>
		</div>
	</body>
</html>